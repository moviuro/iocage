.\" Text automatically generated by txt2man
.TH iocage 8 "17 October 2015" "" "FreeBSD System Manager's Manual"
.SH NAME
\fBiocage \fP- jail manager amalgamating ZFS, VNET and resource limits
\fB
.SH SYNOPSIS
.nf
.fam C
   \fBiocage\fP \fIactivate\fP [\fIzpool\fP]
   \fBiocage\fP \fIfetch\fP [\fIrelease=rel\fP] [\fIftpproto=proto\fP] [\fIftphost=host\fP]
          [ftpdir=path] [\fIftpfiles=list\fP]
   \fBiocage\fP \fIcreate\fP [\fB-b\fP|\fB-c\fP|\fB-e\fP] [property=value]\.\.\.
   \fBiocage\fP \fIclone\fP [\fB-FP\fP] uuid|tag[@snapshot] [property=value]\.\.\.
   \fBiocage\fP \fIdestroy\fP [\fB-f\fP] uuid|tag|ALL
   \fBiocage\fP \fIreset\fP uuid|tag|ALL
   \fBiocage\fP \fIlist\fP [\fB-H\fP] \fB-r\fP|[\fB-btnl\fP]
   \fBiocage\fP \fIstatus\fP [\fB-H\fP] [uuid|tag]
   \fBiocage\fP \fIstart\fP uuid|tag [uuid|tag [\.\.\.]]
   \fBiocage\fP \fIstop\fP uuid|tag [uuid|tag [\.\.\.]]
   \fBiocage\fP \fIrestart\fP [\fB-H\fP] uuid|tag [uuid|tag [\.\.\.]] 
   \fBiocage\fP \fIrcboot\fP
   \fBiocage\fP \fIrcshutdown\fP
   \fBiocage\fP \fIconsole\fP uuid|tag
   \fBiocage\fP \fIexec\fP [\fB-u\fP \fIusername\fP|\fB-U\fP \fIusername\fP] uuid|tag|ALL \fIcommand\fP [arg]\.\.\.
   \fBiocage\fP \fIchroot\fP uuid|tag [\fIcommand\fP [arg]\.\.\.]
   \fBiocage\fP \fIdf\fP [\fB-p\fP]
   \fBiocage\fP \fIget\fP [\fB-H\fP] property[,property[,\.\.\.]]|all uuid|tag|ALL [uuid|tag [\.\.\.]]
   \fBiocage\fP \fIset\fP property=value[,property=value[,\.\.\.]] uuid|tag [uuid|tag [\.\.\.]]
   \fBiocage\fP \fIcap\fP uuid|tag
   \fBiocage\fP \fIlimits\fP [uuid|tag]
   \fBiocage\fP \fIuncap\fP uuid|tag
   \fBiocage\fP \fIinuse\fP [uuid|tag]
   \fBiocage\fP \fIsnapshot\fP uuid|tag[@\fIsnapshot\fP]
   \fBiocage\fP \fIsnaplist\fP uuid|tag
   \fBiocage\fP \fIsnapremove\fP uuid|tag@\fIsnapshot\fP|ALL
   \fBiocage\fP \fIrollback\fP uuid|tag@\fIsnapshot\fP
   \fBiocage\fP \fIpromote\fP uuid|tag
   \fBiocage\fP \fIruntime\fP uuid|tag
   \fBiocage\fP \fIupdate\fP uuid|tag
   \fBiocage\fP \fIupgrade\fP uuid|tag [\fIrelease=rel\fP]
   \fBiocage\fP \fIdefaults\fP
   \fBiocage\fP version|\fB--version\fP
   \fBiocage\fP \fIhelp\fP

.fam T
.fi
.fam T
.fi
.SH DESCRIPTION
\fBiocage\fP is a system administration tool for jails designed to simplify
.TP
.B
jail management tasks.
It abstracts away the management of ZFS backed
jails running VNET or shared IP networking with optional support for
resource \fIlimits\fP.
.PP
Both shared IP based jails and VNET enabled jails are supported.
.PP
Each jail has a unique ID (UUID) automatically generated at creation time.
Using the UUID as a jail identifier means that a jail can be replicated in
.TP
.B
a distributed environment with greater flexibility.
This also eliminates
potential naming clashes on large scale deployments and helps reduce
operator error.
.PP
Partial UUID calling is supported with every operation, e.g. for
"adae47cb-01a8-11e4-aa78-3c970ea3222f" the use in the form of "adae47cb" or
just "adae" works.
.PP
In addition to partial UUID calling, jail TAG's can be used
interchangeably.
.PP
To ease jail identification a TAG field is included in \fIlist\fP mode which can
.TP
.B
be \fIset\fP to any string (hostname, label, note, etc.).
By default if unset
the TAG field contains the creation date and time stamp.
.TP
.B
Properties are stored inside ZFS custom fields.
This eliminates the need
for any configuration files and jails can be easily moved with ZFS send and
receive preserving all of their properties automatically.
.PP
Additional filesystems can be mounted from the host into the jail using an
fstab file located in ${iocroot}/jails/UUID/fstab. This file is used as a
template to generate an fstab of additional mounts for the jail at \fIruntime\fP.
The special string %jailroot% can be used in the fstab file and will be
expanded to the path of the jail's root directory at the time the jail is
started. This allows the same fstab to be usable in different jails or when
the mountpoint of the jail changes due to changing the hack88 property.
Other than the %jailroot% template, the fstab file behaves according to the
format documented in \fBfstab\fP(5).
.PP
\fBiocage\fP relies on ZFS and at least one ZFS pool must be present on the host
.TP
.B
system.
To enable all the features \fBiocage\fP supports, consider the following
optional kernel options and system reqiurements:
.RS
.TP
.B
o
FreeBSD 10.0-RELEASE amd64 or higher
.TP
.B
o
bridge interfaces (bridge0,bridge1) add:
.PP
.nf
.fam C
           cloned_interfaces="bridge0 bridge1"

           to /etc/rc.conf

.fam T
.fi
.TP
.B
o
Kernel compiled with:
.PP
.nf
.fam C
           options         VIMAGE
           options         RACCT
           options         RCTL

.fam T
.fi
.SS   SUBCOMMANDS

\fIactivate\fP [\fIzpool\fP]
.PP
.nf
.fam C
         Intended for automation tools.  The pool can be activated for iocage
         jails without requiring user input.  If the pool is not specified it is
         guessed.

.fam T
.fi
\fIfetch\fP [\fIrelease=rel\fP] [\fIftpproto=proto\fP] [\fIftphost=host\fP] [ftpdir=path]
[\fIftpfiles=\fIlist\fP\fP]
.RS
.PP
Used for downloading and updating/patching releases.
.TP
.B
\fIfetch\fP must be executed as the first \fIcommand\fP on a pristine system.
By
default \fIfetch\fP will download the most recent supported RELEASE for
.TP
.B
deployment.
If other releases are required, this can be changed by
supplying the required release property or just selecting the
appropriate RELEASE from the menu \fIlist\fP.
.PP
Example:
.PP
.nf
.fam C
           # iocage fetch release=9.2-RELEASE

.fam T
.fi
.TP
.B
\fIfetch\fP is also used to \fIupdate\fP already downloaded releases.
To \fIupdate\fP a
local release already present in \fBiocage\fP (\fBiocage\fP \fIlist\fP \fB-r\fP) run:
.PP
.nf
.fam C
           # iocage fetch release=10.2-RELEASE

.fam T
.fi
This example will apply latest patches to 10.1-RELEASE base.
.PP
Newly created jails or basejails will automatically have the latest
updates applied.
.RE
.PP
\fIcreate\fP [\fB-b\fP|\fB-c\fP|\fB-e\fP] [property=value]\.\.\.
.PP
.nf
.fam C
         Default behavior is to create a fully independent jail set by
         duplicating the release into a new dataset for the jail.

         -b       Create a so called "basejail" by cloning the release.  Every
                  time this jail is started, the base operating system will be
                  re-cloned from the release.

         -c       The created jail will be cloned from the release.

         -e       Create an empty jail which can be used for unsupported or
                  custom jails.

         By default, create will deploy a new jail based on the most recent
         supported release.  This can be changed by specifying the release
         property.

         Examples:

         Create a standard jail with the tag "www01" and install the packages
         listed in a file, using the resolv.conf of the host:

.nf
.fam C
           # iocage create tag=www01 pkglist=$HOME/my-pkgs.txt resolver="copy"

.fam T
.fi
.RS
Create a "basejail" type jail with the tag "mybasejail":
.PP
.nf
.fam C
           # iocage create -b tag=mybasejail

.fam T
.fi
.RE
\fIclone\fP [\fB-FP\fP] uuid|tag[@\fIsnapshot\fP] [property=value]\.\.\.
.PP
.nf
.fam C
         Clone the specified jail (ZFS clone).  All properties will be reset on
         the clone; defaults can be overridden by specifying properties on the
         fly.  Custom point-in-time snapshots can be used as a source for
         cloning in the form of uuid@snapshot or tag@snapshot. By default, the
         fstab of the source jail will be backed up and replaced with a blank
         fstab in the new jail.

         -F     Keep the fstab of the old jail instead of replacing it.

         -P     Set properties from the source jail instead of from the user
                defaults dataset. The template property is always initialized to
                "no" on the clone.

         Examples:

         Clone the current state of the jail tagged "www01" into a new jail with
         the tag "www02":

.nf
.fam C
           # iocage clone www01 tag=www02

.fam T
.fi
.RS
Create a jail with the tag "www03", cloning from a previously created
\fIsnapshot\fP named "fresh" taken of the jail tagged "www01" and keeping a
copy of the source jail's fstab in the \fIclone\fP:
.PP
.nf
.fam C
           # iocage clone -F www01@fresh tag=www03

.fam T
.fi
.RE
\fIdestroy\fP [\fB-f\fP] uuid|tag|ALL
.PP
.nf
.fam C
         Destroy given jail.  This is irreversible, use with caution.  If the
         jail is running destroy action will fail.

         With -f the jail will be destroyed without confirmation.

         The keyword "ALL" will destroy all jails and templates irreversibly!

.fam T
.fi
\fIreset\fP uuid|tag|ALL
.PP
.nf
.fam C
         This will reset a jail's properties back to the defaults.

         It reads from the properties set on the "default" dataset.

         The following properties retain their value when a jail is reset:

.nf
.fam C
           uuid, tag, type, jail_zfs_dataset, vnet*_mac, release, hack88,
           resolver, ip4_autostart, ip4_autoend

.fam T
.fi
.RS
You can also \fIreset\fP every jail at once by using the keyword "ALL".
.RE
.PP
\fIlist\fP [\fB-H\fP] \fB-r\fP|[\fB-btnl\fP]
.PP
.nf
.fam C
         Displays a list of all jails.  Templates are not listed by default.

         -H      Omit headers in the output.

         -r      List only the downloaded releases.  In this mode, all other
                 flags apart from -H are no-ops.

         -t      List templates and not other jails.

         -b      List only the jails that are basejails.

         -l      Long output.  Show extra information about the listed jails.

         -n      List non-iocage jails currently running in addition to the
                 iocage jail list.

         Combining the -t and -b flags shows only templates that are basejails.

.fam T
.fi
\fIstatus\fP [\fB-H\fP] [uuid|tag]
.PP
.nf
.fam C
         Show the whether a jail is "up" or "down".  If no jail is specified,
         the status of all jails is output.

         -H      Suppress header.  When no jail is specified, a header is
                 normally show unless this option is used.  No-op when a jail is
                 specified.

.fam T
.fi
\fIdf\fP [\fB-p\fP]
.PP
.nf
.fam C
         List disk space related information.  If -p is specified, the output
         displays raw values so as to be machine parseable, and tags are not
         shown.

         Listed fields:

         CRT - compression ratio
         RES - reserved space
         QTA - disk quota
         USE - used space
         AVA - available space

.fam T
.fi
\fIstart\fP uuid|tag [uuid|tag [\.\.\.]]
.PP
.nf
.fam C
         Start the jail(s) identified by uuid or tag.

.fam T
.fi
\fIstop\fP uuid|tag [uuid|tag [\.\.\.]]
.PP
.nf
.fam C
         Stop the jail(s) identified by uuid or tag.

.fam T
.fi
\fIrestart\fP [\fB-H\fP] uuid|tag [uuid|tag [\.\.\.]]
.PP
.nf
.fam C
         Restart the jail(s) identified by uuid or tag.

         This method will by default restart the jail without destroying the
         jail's networking and the jail process itself.  All processes are
         gracefully restarted inside the jail.  Soft restarting is quicker and
         more graceful than a full stop and start.

         -H      Hard restart.  Overrides the default behavior and instead
                 fully stops and starts the jail.

.fam T
.fi
\fIrcboot\fP
.PP
.nf
.fam C
         Start all jails with "boot" property set to "on".  Intended for boot
         time execution.  Jails will be started in an ordered fashion based on
         their "priority" property.  Jails with the same priority are started in
         parallel.

.fam T
.fi
\fIrcshutdown\fP
.PP
.nf
.fam C
         Stop all jails with "boot" property set to "on".  Intended for full
         host shutdown.  Jails will be stopped in an ordered fashion based on
         their "priority" property.  Jails with the same priority are started in
         parallel.

.fam T
.fi
\fIconsole\fP uuid|tag
.PP
.nf
.fam C
         Console access drops the user to a root shell running in the jail.

.fam T
.fi
\fIexec\fP [\fB-u\fP \fIusername\fP|\fB-U\fP \fIusername\fP] uuid|tag|ALL \fIcommand\fP [arg]\.\.\.
.PP
.nf
.fam C
         Execute command inside the jail.  This is simply an iocage UUID/tag
         wrapper for jexec(8).

.fam T
.fi
\fIchroot\fP uuid|tag [\fIcommand\fP [args]\.\.\.]
.PP
.nf
.fam C
         Chroot into jail, without actually starting the jail itself.  Useful
         for initial setup (set root password, configure networking).  You can
         specify a command just like with the normal system chroot tool.

.fam T
.fi
\fIget\fP property[,property[,\.\.\.]]|all [uuid|tag|ALL] [uuid|tag [\.\.\.]]
.PP
.nf
.fam C
         Get the named property or if "all" keyword is specified dump all
         properties known to iocage.  If no jail is specified or the keyword
         "ALL" is given as the jail, the property is listed for all jails.

         -H     Suppress headers

         Examples:

.nf
.fam C
           To display whether resource limits are enforced for a jail:

           # iocage get rlimits UUID|TAG

           To display all attributed IPv4 addresses:

           # iocage get ip4_addr ALL
           # iocage get ip4_addr

           To display all information about a jail:

           # iocage get all UUID|TAG

.fam T
.fi
\fIset\fP property=value[,property=value[,\.\.\.]] uuid|tag [uuid|tag [\.\.\.]]
.PP
.nf
.fam C
         Set a property to value.

.fam T
.fi
\fIcap\fP uuid|tag
.PP
.nf
.fam C
         Reapply resource limits on a jail while it is running.

.fam T
.fi
\fIlimits\fP [uuid|tag]
.PP
.nf
.fam C
         Display active resource limits for a jail or all jails.  With no jail
         specified, display all limits active for all jails.

.fam T
.fi
\fIuncap\fP uuid|tag
.PP
.nf
.fam C
         Release all resource limits.  This command can disable limits on
         running jails on the fly.

.fam T
.fi
\fIinuse\fP [uuid|tag]
.PP
.nf
.fam C
         Display consumed resources for a jail.  Without a specified jail, dump
         all resources for all running jails in a comma delimited form.

.fam T
.fi
\fIsnapshot\fP uuid|tag[@\fIsnapshot\fP]
.PP
.nf
.fam C
         Create a ZFS snapshot for jail.  If no snapshot name is specified, a
         name based on the current date and time is generated.

.fam T
.fi
\fIsnaplist\fP uuid|tag
.PP
.nf
.fam C
         List all snapshots belonging to jail.

         Listed fields:

         NAME    - snapshot name
         CREATED - creation time
         RSIZE   - referenced size
         USED    - used space

.fam T
.fi
\fIsnapremove\fP uuid|tag@\fIsnapshot\fP|ALL
.PP
.nf
.fam C
         Destroy the specified jail snapshot.  If the keyword ALL is specified,
         all snapshots will be destroyed for the jail.

.fam T
.fi
\fIrollback\fP uuid|tag@\fIsnapshot\fP
.PP
.nf
.fam C
         Rollback to an existing snapshot.  Any intermediate snapshots will be
         destroyed.  For more information on this functionality please read
         zfs(8).

.fam T
.fi
\fIpromote\fP uuid|tag
.PP
.nf
.fam C
         Promote a cloned jail to a fully independent copy.  For more details
         please read zfs(8).

.fam T
.fi
\fIruntime\fP uuid|tag
.PP
.nf
.fam C
         Show runtime configuration of a jail.  Useful for debugging.

.fam T
.fi
\fIupdate\fP uuid|tag
.PP
.nf
.fam C
         Update jail to latest patch level.  A back-out snapshot is created to
         allow safe update/rollback.

.fam T
.fi
\fIupgrade\fP uuid|tag [\fIrelease=rel\fP]
.PP
.nf
.fam C
         By default this will upgrade a jail to match the most current supported
         release, unless another otherwise specified with the "release"
         property.

         Please note: Upgrading basejails is done by setting the jail's
         "release" property to the required new release:

         iocage set release=10.1-RELEASE uuid|tag

         For this the release must be locally available.  The basejail will
         re-clone its filesystems from the new release either by issuing the
         upgrade command or at next jail start.

.fam T
.fi
\fIdefaults\fP
.PP
.nf
.fam C
         Display all defaults set in iocage itself.

.fam T
.fi
version|\fB--version\fP
.PP
.nf
.fam C
         List version number.

.fam T
.fi
\fIhelp\fP
.PP
.nf
.fam C
         List quick help.

.fam T
.fi
.SH PROPERTIES
For more information on properties please check the relevant man page which
.TP
.B
is noted under each property in the form of "Source: manpage".
Source
"local" marks \fBiocage\fP specific properties.
.PP
pkglist=none | path-to-file
.RS
.TP
.B
A text file containing one package per line.
These will be auto-
.TP
.B
installed when a jail is created.
Works only in combination with the
\fIcreate\fP subcommand.
.PP
Note: A working resolver is required for this feature. The default
resolver setting creates the jail without a resolver configured. Set
resolver in the user \fIdefaults\fP or on the \fIcommand\fP line for this to work.
.PP
Default: none
Source: local
.RE
.PP
vnet=on | off
This controls whether to \fIstart\fP the jail with VNET or a shared IP
.RS
.TP
.B
configuration.
Default is to auto-guess from a sysctl.  If you don't
need a fully-virtualized per-jail network stack, \fIset\fP it to off.
.PP
Default: auto-guess
Source: local
.RE
.PP
ip4_addr="interface|ip-address/netmask param \.\.\."
.PP
.nf
.fam C
         The IPv4 address for VNET and shared IP jails.

         For shared IP jails if an interface is given before the IP address, an
         alias for the address will be added to that interface, as it is with
         the interface parameter.  If the DEFAULT tag is used instead of an
         interface, the interface will be automatically assigned based upon the
         system's default interface.

         If a netmask in either dotted-quad or CIDR form is given after IP
         address, it will be used when adding the IP alias.

         Additional parameters for ifconfig(8) may optionally be supplied
         following the address.

         Multiple addresses are configured by using a comma separated list.

         If the AUTOIP4 tag is used in place of an ip-address, the IP address
         will be automatically assigned at first start of the jail.  This
         requires that the ip4_autostart and ip4_autoend variables are set on
         the 'default' property source.  If used, the IP4 address will be set to
         the first available based upon the given range and already created
         jails.

         Example:

.nf
.fam C
           # iocage set ip4_autostart="100" default
           # iocage set ip4_autoend="150" default

.fam T
.fi
.RS
This will result in the automatic IPv4 address being assigned in the
.TP
.B
base range of the default network interface.
I.E. if the local default
NIC is \fIset\fP to 192.168.0.XXX, then the new address will be
192.168.0.[100-150]
.PP
For VNET jails the interface will be configured with the IP addresses
listed.
.PP
Example:
.PP
.nf
.fam C
           # iocage set ip4_addr="vnet0|192.168.0.10/24,vnet1|10.1.1.10/24"

.fam T
.fi
.TP
.B
This would configure interfaces vnet0 and vnet1 in a VNET jail.
In
this case no network configuration is necessary in the jail's rc.conf
file.
.PP
Default: none
Source: \fBjail\fP(8)
.RE
.PP
ip4_saddrsel=1 | 0
Only takes effect when vnet=off.
A boolean option to change the formerly mentioned behaviour and disable
IPv4 source address selection for the prison in favour of the primary
.RS
.TP
.B
IPv4 address of the jail.
Source address selection is enabled by
default for all jails, and the ip4_nosaddrsel settting of a parent jail
is not inherited for any child jails.
.PP
Default: 1
Source: \fBjail\fP(8)
.RE
.PP
ip4=new | disable | inherit
Only takes effect when vnet=off.
.RS
.TP
.B
Control the availability of IPv4 addresses.
Possible values are
"inherit" to allow unrestricted access to all system addresses, "new"
to restrict addresses via ip4.addr above, and "disable" to \fIstop\fP the
.TP
.B
jail from using IPv4 entirely.
Setting the ip4.addr parameter implies
a value of "new".
.PP
Default: new
Source: \fBjail\fP(8)
.RE
.PP
defaultrouter=none | ipaddress
Setting this property to anything other than none will try to
configure a default route inside a VNET jail.
.RS
.PP
Default: none
Source: \fBroute\fP(8)
.RE
.PP
defaultrouter6=none | ip6address
Setting this property to anything other than none will try to
configure a default IPv6 route inside a VNET jail.
.RS
.PP
Default: none
Source: \fBroute\fP(8)
.RE
.PP
resolver=none | copy | nameserver IP;nameserver IP;search domain.local
Sets the jail's resolver (resolv.conf).
.RS
.PP
If the resolver is \fIset\fP to "none", (default) the jail's resolv.conf will
.TP
.B
not be touched by iocage.
A resolv.conf file must be manually created
in the jail and managed by the administrator.
.PP
If the resolver is \fIset\fP to "copy", the jail will inherit the host's
.TP
.B
resolv.conf file.
When the jail starts, /etc/resolv.conf is copied
into the jail from the host, replacing the file in the jail if it
already exists.
.PP
If the resolver is \fIset\fP to something other than "none" or "copy" then
the string is transformed into a resolv.conf file for the jail at \fIstart\fP
.TP
.B
time, replacing the file in the jail if it already exists.
Fields must
be ; delimited, which are translated to newlines in the resulting file.
.PP
Default: none
Source: \fBresolver\fP(5)
.RE
.PP
ip6_addr, ip6_saddrsel, ip6
A \fIset\fP of IPv6 options for the prison, the counterparts to ip4_addr,
ip4_saddrsel and ip4 above.
.RS
.PP
Source: \fBjail\fP(8)
.RE
.PP
interfaces=vnet0:bridge0,vnet1:bridge1 | vnet0:bridge0
By default there are two interfaces specified with their bridge
.RS
.TP
.B
association.
Up to four interfaces are supported.  Interface
.TP
.B
configurations are separated by commas.
Format is interface:bridge,
where left value is the virtual VNET interface name, right value is the
bridge name where the virtual interface should be attached.
.PP
Default: vnet0:bridge0,vnet1:bridge1
Source: local
.RE
.PP
host_hostname=UUID
The hostname of the jail.
.RS
.PP
Default: UUID
Source: \fBjail\fP(8)
.RE
.PP
exec_fib=0 | 1 \.\.\.
The FIB (routing table) to \fIset\fP when running commands inside the jail.
.RS
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
devfs_ruleset=4 | 0 \.\.\.
The number of the devfs ruleset that is enforced for mounting devfs in
.RS
.TP
.B
this jail.
A value of zero (default) means no ruleset is enforced.
Descendant jails inherit the parent jail's devfs ruleset enforcement.
Mounting devfs inside a jail is possible only if the allow_mount and
allow_mount_devfs permissions are effective and enforce_statfs is \fIset\fP
.TP
.B
to a value lower than 2.
Devfs rules and rulesets cannot be viewed or
modified from inside a jail.
.PP
Note: It is important that only appropriate device nodes in devfs be
exposed to a jail; access to disk devices in the jail may permit
processes in the jail to bypass the jail sandboxing by modifying files
.TP
.B
outside of the jail.
See \fBdevfs\fP(8) for information on how to use devfs
.TP
.B
rules to limit access to entries in the per-jail devfs.
A simple devfs
ruleset for jails is available as ruleset #4 in
/etc/\fIdefaults\fP/devfs.rules
.PP
Default: 4
Source: \fBjail\fP(8)
.RE
.PP
mount_devfs=1 | 0
Mount a \fBdevfs\fP(5) filesystem on the chrooted /dev directory, and apply
the ruleset in the devfs_ruleset parameter (or a default of ruleset 4:
devfsrules_jail) to restrict the devices visible inside the jail.
.RS
.PP
Default: 1
Source: \fBjail\fP(8)
.RE
.PP
exec_start="/bin/sh /etc/rc"
\fBCommand\fP(s) to run in the prison environment when a jail is created.
.RS
.PP
Default: /bin/sh /etc/rc
Source: \fBjail\fP(8)
.RE
.PP
exec_stop="/bin/sh /etc/rc.shutdown"
\fBCommand\fP(s) to run in the prison environment before a jail is removed,
and after any exec_prestop commands have completed.
.RS
.PP
Default: /bin/sh /etc/rc.shutdown
Source: \fBjail\fP(8)
.RE
.PP
exec_prestart="/usr/bin/true"
\fBCommand\fP(s) to run in the system environment before a jail is started.
.RS
.PP
Default: /usr/bin/true
Source: \fBjail\fP(8)
.RE
.PP
exec_prestop="/usr/bin/true"
\fBCommand\fP(s) to run in the system environment before a jail is stopped.
.RS
.PP
Default: /usr/bin/true
Source: \fBjail\fP(8)
.RE
.PP
exec_poststop="/usr/bin/true"
\fBCommand\fP(s) to run in the system environment after a jail is stopped.
.RS
.PP
Default: /usr/bin/true
Source: \fBjail\fP(8)
.RE
.PP
exec_poststart="/usr/bin/true"
\fBCommand\fP(s) to run in the system environment after a jail is started,
and after any exec_start commands have completed.
.RS
.PP
Default: /usr/bin/true
Source: \fBjail\fP(8)
.RE
.PP
exec_clean=1 | 0
.RS
.TP
.B
Run commands in a clean environment.
The environment is discarded
.TP
.B
except for HOME, SHELL, TERM and USER.
HOME and SHELL are \fIset\fP to the
.TP
.B
target login's default values.
USER is \fIset\fP to the target login.  TERM
.TP
.B
is imported from the current environment.
The environment variables
from the login class capability database for the target login are also
\fIset\fP.
.PP
Default: 1
Source: \fBjail\fP(8)
.RE
.PP
exec_timeout=60 | 30 \.\.\.
.RS
.TP
.B
The maximum amount of time to wait for a \fIcommand\fP to complete.
If a
\fIcommand\fP is still running after this many seconds have passed, the jail
will be terminated.
.PP
Default: 60
Source: \fBjail\fP(8)
.RE
.PP
stop_timeout=30 | 60 \.\.\.
The maximum amount of time to wait for a jail's processes to exit after
sending them a SIGTERM signal (which happens after the exec_stop
.RS
.TP
.B
commands have completed).
After this many seconds have passed, the
.TP
.B
jail will be removed, which will kill any remaining processes.
If this
is \fIset\fP to zero, no SIGTERM is sent and the prison is immediately
removed.
.PP
Default: 30
Source: \fBjail\fP(8)
.RE
.PP
exec_jail_user=root
The user to run commands as, when running in the jail environment.
.RS
.PP
Default: root
.TP
.B
Source:
\fBjail\fP(8)
.RE
.PP
exec_system_jail_user=0 | 1
This boolean option looks for the exec_jail_user in the system
\fBpasswd\fP(5) file, instead of in the jail's file.
.RS
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
exec_system_user=root
The user to run commands as, when running in the system environment.
The default is to run the commands as the current user.
.RS
.PP
Default: root
Source: \fBjail\fP(8)
.RE
.PP
mount_fdescfs=1 | 0
Mount a \fBfdescfs\fP(5) filesystem in the jail's /dev/fd directory.
Note: This is not supported on FreeBSD 9.3.
.RS
.PP
Default: 1
Source: \fBjail\fP(8)
.RE
.PP
mount_procfs=0 | 1
Mount a \fBprocfs\fP(5) filesystem in the jail's /dev/proc directory.
.RS
.PP
Default: 0
Source: local
.RE
.PP
enforce_statfs=2 | 1 | 0
This determines which information processes in a jail are able to \fIget\fP
.RS
.TP
.B
about mount points.
It affects the behaviour of the following
syscalls: \fBstatfs\fP(2), \fBfstatfs\fP(2), \fBgetfsstat\fP(2) and \fBfhstatfs\fP(2) (as well
.TP
.B
as similar compatibility syscalls).
When \fIset\fP to 0, all mount points
.TP
.B
are available without any restrictions.
When \fIset\fP to 1, only mount
.TP
.B
points below the jail's \fIchroot\fP directory are visible.
In addition to
that, the path to the jail's \fIchroot\fP directory is removed from the front
.TP
.B
of their pathnames.
When \fIset\fP to 2 (default), above syscalls can
operate only on a mount-point where the jail's \fIchroot\fP directory is
located.
.PP
Default: 2
Source: \fBjail\fP(8)
.RE
.PP
children_max=0 | \.\.\.
The number of child jails allowed to be created by this jail (or by
.RS
.TP
.B
other jails under this jail).
This limit is zero by default,
.TP
.B
indicating the jail is not allowed to \fIcreate\fP child jails.
See the
Hierarchical Jails section for more information in \fBjail\fP(8).
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
login_flags="\fB-f\fP root"
Supply these flags to login when logging in to jails with the \fIconsole\fP
function.
.RS
.PP
Default: \fB-f\fP root
Source: \fBlogin\fP(1)
.RE
.PP
jail_zfs=on | off
.RS
.TP
.B
Enables automatic ZFS jailing inside the jail.
Assigned ZFS dataset
will be fully controlled by the jail.
Note: Setting this to "on" automatically enables allow_mount=1
enforce_statfs=1 and allow_mount_zfs=1! These are dependent options
required for ZFS management inside a jail.
.PP
Default: off
Source: local
.RE
.PP
jail_zfs_dataset=DEFAULT/\fBiocage\fP/jails/UUID/data | zfs_filesystem
This is the dataset to be jailed and fully handed over to a jail.
Takes the full ZFS filesystem name including the pool name. "DEFAULT"
may be used as a keyword to represent the default pool \fBiocage\fP uses.
.RS
.TP
.B
Note: only valid if jail_zfs=on.
By default the mountpoint is \fIset\fP to
none, to mount this dataset \fIset\fP its mountpoint inside the jail i.e.
"zfs \fIset\fP mountpoint=/data full-dataset-name" and issue "mount \fB-a\fP".
.PP
Default: DEFAULT/\fBiocage\fP/jails/UUID/data
Source: local
.RE
.PP
securelevel=3 | 2 | 1 | 0 | \fB-1\fP
.RS
.TP
.B
The value of the jail's kern.securelevel sysctl.
A jail never has a
lower securelevel than the default system, but by setting this
.TP
.B
parameter it may have a higher one.
If the system securelevel is
changed, any jail securelevels will be at least as secure.
.PP
Default: 2
Source: \fBjail\fP(8)
.RE
.PP
allow_set_hostname=1 | 0
The jail's hostname may be changed via \fBhostname\fP(1) or \fBsethostname\fP(3).
.RS
.PP
Default: 1
Source: \fBjail\fP(8)
.RE
.PP
allow_sysvipc=0 | 1
.RS
.TP
.B
A process within the jail has access to System V IPC primitives.
In
the current jail implementation, System V primitives share a single
namespace across the host and jail environments, meaning that processes
within a jail would be able to communicate with (and potentially
interfere with) processes outside of the jail, and in other jails.
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
allow_raw_sockets=0 | 1
.RS
.TP
.B
The prison root is allowed to \fIcreate\fP raw sockets.
Setting this
parameter allows utilities like \fBping\fP(8) and \fBtraceroute\fP(8) to operate
.TP
.B
inside the prison.
If this is \fIset\fP, the source IP addresses are
enforced to comply with the IP address bound to the jail, regardless of
whether or not the IP_HDRINCL flag has been \fIset\fP on the socket.
.PP
Since raw sockets can be used to configure and interact with various
network subsystems, extra caution should be used where privileged
access to jails is given out to untrusted parties.
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
allow_chflags=0 | 1
Normally, privileged users inside a jail are treated as unprivileged by
.RS
.TP
.B
\fBchflags\fP(2).
When this parameter is \fIset\fP, such users are treated as
privileged, and may manipulate system file flags subject to the usual
constraints on kern.securelevel.
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
allow_mount=0 | 1
Privileged users inside the jail will be able to mount and unmount file
.RS
.TP
.B
system types marked as jail-friendly.
The \fBlsvfs\fP(1) \fIcommand\fP can be used
.TP
.B
to find file system types available for mount from within a jail.
This
permission is effective only if enforce_statfs is \fIset\fP to a value lower
than 2.
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
allow_mount_devfs=0 | 1
Privileged users inside the jail will be able to mount and unmount the
.RS
.TP
.B
devfs file system.
This permission is effective only together with
allow.mount and if enforce_statfs is \fIset\fP to a value lower than 2.
Please consider restricting the devfs ruleset with the devfs_ruleset
option.
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
allow_mount_nullfs=0 | 1
Privileged users inside the jail will be able to mount and unmount the
.RS
.TP
.B
nullfs file system.
This permission is effective only together with
allow_mount and if enforce_statfs is \fIset\fP to a value lower than 2.
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
allow_mount_procfs=0 | 1
Privileged users inside the jail will be able to mount and unmount the
.RS
.TP
.B
procfs file system.
This permission is effective only together with
allow.mount and if enforce_statfs is \fIset\fP to a value lower than 2.
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
allow_mount_tmpfs=0 | 1
Privileged users inside the jail will be able to mount and unmount the
.RS
.TP
.B
tmpfs file system.
This permission is effective only together with
allow.mount and if enforce_statfs is \fIset\fP to a value lower than 2.
Note: This is not supported on FreeBSD 9.3.
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
allow_mount_zfs=0 | 1
Privileged users inside the jail will be able to mount and unmount the
.RS
.TP
.B
ZFS file system.
This permission is effective only together with
.TP
.B
allow.mount and if enforce_statfs is \fIset\fP to a value lower than 2.
See
\fBzfs\fP(8) for information on how to configure the ZFS filesystem to
operate from within a jail.
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
allow_quotas=0 | 1
.RS
.TP
.B
The jail root may administer quotas on the jail's \fBfilesystem\fP(s).
This
includes filesystems that the jail may share with other jails or with
non-jailed parts of the system.
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
allow_socket_af=0 | 1
Sockets within a jail are normally restricted to IPv4, IPv6, local
.RS
.TP
.B
(UNIX), and route.
This allows access to other protocol stacks that
have not had jail functionality added to them.
.PP
Default: 0
Source: \fBjail\fP(8)
.RE
.PP
host_hostuuid=UUID
Default: UUID
Source: \fBjail\fP(8)
.PP
tag="any string"
Custom string for aliasing jails.
.RS
.PP
Default: date@time
Source: local
.RE
.PP
template=yes | no
.RS
.TP
.B
This property controls whether the jail is a template.
Templates are
.TP
.B
not started by \fBiocage\fP.
Set to yes if you intend to convert jail into
template.
.PP
(See EXAMPLES section)
.PP
Default: no
Source: local
.RE
.PP
boot=on | off
If \fIset\fP to "on" jail will be auto-started at boot time (\fIrcboot\fP
subcommand) and stopped at shutdown time (\fIrcshutdown\fP subcommand).
Jails will be started and stopped based on their priority value.
.RS
.PP
Default: off
Source: local
.RE
.PP
notes="any string"
Custom notes for miscellaneous tagging.
.RS
.PP
Default: none
Source: local
.RE
.PP
owner=root
The owner of the jail, can be any string.
.RS
.PP
Default: root
Source: local
.RE
.PP
priority=99 | 50 \.\.\.
Start priority at boot time, smaller value means higher priority.
Also, for shutdown the order will be reversed.
.RS
.PP
Default: 99
.RE
.PP
last_started
.RS
.TP
.B
Last successful \fIstart\fP time.
Auto \fIset\fP every time jail starts.
.PP
Default: timestamp
Source: local
.RE
.PP
type=jail | basejail
Currently only jail and basejail are supported.
.RS
.PP
Default: jail
Source: local
.RE
.PP
hostid=UUID
.RS
.TP
.B
The UUID of the host node.
Jails won't \fIstart\fP if this property differs
.TP
.B
from the actual UUID of the host node.
This is to safeguard jails from
being started on different nodes in case they are periodically
replicated across.
.PP
Default: UUID of the host (taken from /etc/hostid)
Source: local
.RE
.PP
release=10.2-RELEASE | 9.3-RELEASE
.RS
.TP
.B
The RELEASE used at creation time.
Can be \fIset\fP to any string if needed.
.PP
Default: the most recent supported RELEASE
Source: local
.RE
.PP
compression=on | off | lzjb | gzip | gzip-N | zle | lz4
.RS
.TP
.B
Controls the compression algorithm used for this dataset.
The lzjb
compression algorithm is optimized for performance while providing
.TP
.B
decent data compression.
Setting compression to on uses the lzjb
.TP
.B
compression algorithm.
The gzip compression algorithm uses the same
.TP
.B
compression as the \fBgzip\fP(1) \fIcommand\fP.
Specify the gzip level by using
the value gzip-N where N is an integer from 1 (fastest) to 9 (best
.TP
.B
compression ratio).
Currently, gzip is equivalent to gzip-6 (which
.TP
.B
is also the default for \fBgzip\fP(1)).
The zle compression algorithm
compresses runs of zeros.
.PP
The lz4 compression algorithm is a high-performance replacement for the
.TP
.B
lzjb algorithm.
It features significantly faster compression and
decompression, as well as a moderately higher compression ratio than
lzjb, but can only be used on pools with the lz4_compress feature \fIset\fP
.TP
.B
to enabled.
See \fBzpool-features\fP(7) for details on ZFS feature flags and
the lz4_compress feature.
.PP
This property can also be referred to by its shortened column name
.TP
.B
compress.
Changing this property affects only newly-written data.
.PP
Default: lz4
Source: \fBzfs\fP(8)
.RE
.PP
origin
.RS
.TP
.B
This is only \fIset\fP for clones.
Read-only.
For cloned file systems or volumes, the \fIsnapshot\fP from which the \fIclone\fP
.TP
.B
was created.
See also the clones property.
.PP
Default: -
Source: \fBzfs\fP(8)
.RE
.PP
quota=15G | 50G | \.\.\.
Quota for jail.
Limits the amount of space a dataset and its descendents can consume.
.RS
.TP
.B
This property enforces a hard limit on the amount of space used.
This
includes all space consumed by descendents, including file systems and
.TP
.B
snapshots.
Setting a quota on a descendent of a dataset that already
has a quota does not override the ancestor's quota, but rather imposes
an additional limit.
.PP
Default: none
Source: \fBzfs\fP(8)
.RE
.PP
mountpoint
.RS
.TP
.B
Path for the jail's root filesystem.
Read-only.
.PP
Source: \fBzfs\fP(8)
.RE
.PP
compressratio
.RS
.TP
.B
Compression ratio.
Read-only.
For non-snapshots, the compression ratio achieved for the used space of
.TP
.B
this dataset, expressed as a multiplier.
The used property includes
descendant datasets, and, for clones, does not include the space shared
with the origin \fIsnapshot\fP.
.PP
Source: \fBzfs\fP(8)
.RE
.PP
available
Available space in jail's dataset.
The amount of space available to the dataset and all its children,
.RS
.TP
.B
assuming that there is no other activity in the pool.
Because space is
shared within a pool, availability can be limited by any number of
factors, including physical pool size, quotas, reservations, or other
datasets within the pool.
.PP
Source: \fBzfs\fP(8)
.RE
.PP
used
.RS
.TP
.B
Used space by jail.
Read-only.
The amount of space consumed by this dataset and all its descendents.
This is the value that is checked against this dataset's quota and
.TP
.B
reservation.
The space used does not include this dataset's
reservation, but does take into account the reservations of any
.TP
.B
descendent datasets.
The amount of space that a dataset consumes from
its parent, as well as the amount of space that are freed if this
dataset is recursively destroyed, is the greater of its space used and
its reservation.
.PP
When snapshots (see the "Snapshots" section) are created, their space
is initially shared between the \fIsnapshot\fP and the file system, and
.TP
.B
possibly with previous snapshots.
As the file system changes, space
that was previously shared becomes unique to the \fIsnapshot\fP, and counted
.TP
.B
in the \fIsnapshot\fP's space used.
Additionally, deleting snapshots can
increase the amount of space unique to (and used by) other snapshots.
.PP
The amount of space used, available, or referenced does not take into
.TP
.B
account pending changes.
Pending changes are generally accounted for
.TP
.B
within a few seconds.
Committing a change to a disk using \fBfsync\fP(2) or
O_SYNC does not necessarily guarantee that the space usage information
is updated immediately.
.TP
.B
Source:
\fBzfs\fP(8)
.RE
.PP
dedup=on | off | verify | sha256[,verify]
Deduplication for jail.
.RS
.TP
.B
Configures deduplication for a dataset.
The default value is off.
The default deduplication checksum is sha256 (this may change in the
.TP
.B
future).
When dedup is enabled, the checksum defined here overrides
.TP
.B
the checksum property.
Setting the value to verify has the same
effect as the setting sha256,verify.
.PP
If \fIset\fP to verify, ZFS will do a byte-to-byte comparsion in case of
two blocks having the same signature to make sure the block contents
are identical.
.PP
Default: off
Source: \fBzfs\fP(8)
.RE
.PP
reservation=size | none
Reserved space for jail.
The minimum amount of space guaranteed to a dataset and its
.RS
.TP
.B
descendents.
When the amount of space used is below this value, the
dataset is treated as if it were taking up the amount of space
.TP
.B
specified by its reservation.
Reservations are accounted for in the
parent datasets' space used, and count against the parent datasets'
quotas and reservations.
.PP
Default: none
Source: \fBzfs\fP(8)
.RE
.PP
sync_target
This is for future use, currently not supported.
.PP
sync_tgt_zpool
This is for future use, currently not supported.
.PP
rlimits=on | off
If \fIset\fP to "on" resource \fIlimits\fP will be enforced.
.RS
.PP
Default: off
Source: local
.RE
.PP
cpuset=1 | 1,2,3,4 | 1-2 | off
.RS
.TP
.B
Controls the jail's CPU affinity.
For more details please refer to
\fBcpuset\fP(1).
.PP
Default: off
Source: \fBcpuset\fP(1)
.SH RESOURCE LIMITS
Resource \fIlimits\fP (except cpuset and rlimits) use the following value
field formatting in the property: limit:action.
.PP
Limit defines how much of the resource a process can use before the
defined action triggers.
.PP
Action defines what will happen when a process exceeds the allowed
amount.
.PP
Valid actions are:
.RS
.TP
.B
deny
deny the allocation; not supported for cpu and
wallclock
.TP
.B
log
log a warning to the \fIconsole\fP
.TP
.B
devctl
send notification to \fBdevd\fP(8)
.TP
.B
sig*
e.g. sigterm; send a signal to the offending
process
.RE
.PP
To better understand what this means please read \fBrctl\fP(8)
before enabling any \fIlimits\fP.
.PP
The following resource \fIlimits\fP are supported:
.PP
memoryuse=limit:action | off
.PP
.nf
.fam C
       Limits the resident set size (DRAM).

       Default: 8G:log
       Source: rctl(8)

.fam T
.fi
memorylocked=limit:action | off
.PP
.nf
.fam C
       Limits locked memory.

       Default: off
       Source: rctl(8)

.fam T
.fi
vmemoryuse=limit:action | off
.PP
.nf
.fam C
       Virtual memory limit (swap + DRAM combined)

       Default: off
       Source: rctl(8)

.fam T
.fi
maxproc=limit:action | off
.PP
.nf
.fam C
       Limit maximum number of processes.

       Default: off
       Source: rctl(8)

.fam T
.fi
cputime=limit:action | off
.PP
.nf
.fam C
       Limit CPU time, in seconds.

       Default: off
       Source: rctl(8)

.fam T
.fi
pcpu=limit:action | off
.PP
.nf
.fam C
       Limit %CPU, in percents of a single CPU core or hardware thread.

       Default: off
       Source: rctl(8)

.fam T
.fi
datasize=limit:action | off
.PP
.nf
.fam C
       Limit data size.

       Default: off
       Source: rctl(8)

.fam T
.fi
stacksize=limit:action | off
.PP
.nf
.fam C
       Limit stack size.

       Default: off
       Source: rctl(8)

.fam T
.fi
coredumpsize=limit:action | off
.PP
.nf
.fam C
       Limit core dump size.

       Default: off
       Source: rctl(8)

.fam T
.fi
openfiles=limit:action | off
.PP
.nf
.fam C
       Limit file descriptor table size (number of open files).

       Default: off
       Source: rctl(8)

.fam T
.fi
pseudoterminals=limit:action | off
.PP
.nf
.fam C
       Limit number of PTYs.

       Default: off
       Source: rctl(8)

.fam T
.fi
swapuse=limit:action | off
.PP
.nf
.fam C
       Limit swap usage.

       Default: off
       Source: rctl(8)

.fam T
.fi
nthr=limit:action | off
.PP
.nf
.fam C
       Limit number of threads.

       Default: off
       Source: rctl(8)

.fam T
.fi
msgqqueued=limit:action | off
.PP
.nf
.fam C
       Limit number of queued SysV messages.

       Default: off
       Source: rctl(8)

.fam T
.fi
msgqsize=limit:action | off
.PP
.nf
.fam C
       Limit SysV message queue size.

       Default: off
       Source: rctl(8)

.fam T
.fi
nmsgq=limit:action | off
.PP
.nf
.fam C
       Limit number of SysV message queues.

       Default: off
       Source: rctl(8)

.fam T
.fi
nsemop=limit:action | off
.PP
.nf
.fam C
       Limit number of SysV semaphores modified in a single semop(2) call.

       Default: off
       Source: rctl(8)

.fam T
.fi
nshm=limit:action | off
.PP
.nf
.fam C
       Limit number of SysV shared memory segments.

       Default: off
       Source: rctl(8)

.fam T
.fi
shmsize=limit:action | off
.PP
.nf
.fam C
       Limit SysV shared memory size.

       Default: off
       Source: rctl(8)

.fam T
.fi
wallclock=limit:action | off
.PP
.nf
.fam C
       Limit wallclock time.

       Default: off
       Source: rctl(8)

.fam T
.fi
.SH EXAMPLES
Set up \fBiocage\fP from scratch:
.PP
.nf
.fam C
       # iocage fetch

.fam T
.fi
Create first jail:
.PP
.nf
.fam C
       # iocage create tag=myjail

.fam T
.fi
List jails:
.PP
.nf
.fam C
       # iocage list

.fam T
.fi
Start jail:
.PP
.nf
.fam C
       # iocage start UUID

.fam T
.fi
Turn on resource \fIlimits\fP and apply them:
.PP
.nf
.fam C
       # iocage set rlimits=on UUID
       # iocage cap UUID

.fam T
.fi
Display resource usage:
.PP
.nf
.fam C
       # iocage inuse UUID

.fam T
.fi
Convert jail into template:
.PP
.nf
.fam C
       # iocage set template=yes UUID

.fam T
.fi
List templates:
.PP
.nf
.fam C
       # iocage list -t

.fam T
.fi
Clone jail from template:
.PP
.nf
.fam C
       # iocage clone UUID-of-template tag=myjail

.fam T
.fi
Get the last successful \fIstart\fP time for all jails:
.PP
.nf
.fam C
       # iocage show last_started

.fam T
.fi
.SH HINTS
\fBiocage\fP marks a ZFS pool in a property on the pool's root-level dataset and
identifies the active pool for use based on this property.
.PP
If using VNET don't forget to add the node's physical NIC into one
.TP
.B
of the bridges if you need an outside connection.
Also read \fBbridge\fP(4)
to see how traffic is handled if you are not familiar with this concept
(in a nutshell: bridge behaves like a network switch).
.TP
.B
PF firewall is not supported inside VNET jails as of July 2014.
PF can be
.TP
.B
enabled for the host however.
IPFW is fully supported inside a VNET jail.
.PP
Property validation is not handled by \fBiocage\fP (to keep it simple) so please
make sure your property values are supported before configuring any
properties.
.TP
.B
The actual jail name in the \fBjls\fP(8) output is \fIset\fP to ioc-UUID.
This is a
required workaround as jails will refuse to \fIstart\fP with \fBjail\fP(8) when name
starts with a "0".
.PP
To prevent dmesg leak inside jails apply the following sysctl:
.PP
.nf
.fam C
       security.bsd.unprivileged_read_msgbuf=0

.fam T
.fi
If using VNET consider applying these sysctl's as well:
.PP
.nf
.fam C
       net.inet.ip.forwarding=1
       net.link.bridge.pfil_onlyip=0
       net.link.bridge.pfil_bridge=0
       net.link.bridge.pfil_member=0

.fam T
.fi
For more information please visit:
.PP
.nf
.fam C
       https://github.com/iocage/iocage

.fam T
.fi
.SH SEE ALSO
\fBjail\fP(8), \fBifconfig\fP(8), \fBepair\fP(4), \fBbridge\fP(4), \fBjexec\fP(8), \fBzfs\fP(8), \fBzpool\fP(8),
\fBrctl\fP(8), \fBcpuset\fP(1), \fBfreebsd-\fIupdate\fP\fP(8), \fBsysctl\fP(8)
.SH BUGS
In case of bugs/issues/feature requests, please open an issue at
https://github.com/freqlabs/\fBiocage\fP/issues
.SH AUTHORS

Peter Toth <peter.toth198@gmail.com>
Brandon Schneider <brandonschneider89@gmail.com>
.SH SPECIAL THANKS
Sichendra Bista - for his ever willing attitude and ideas.
