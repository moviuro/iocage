#!/bin/sh

# Print supported releases----------------------------------
__print_release () {
    local _rel

    echo "Supported releases are: "
    for _rel in ${supported_releases} ; do
        printf "%15s\n" "${_rel}"
    done
}

# Print defaults set in this script.
__print_defaults () {
    local _CONF _prop _value

    _CONF="${CONF_NET}
           ${CONF_JAIL}
           ${CONF_RCTL}
           ${CONF_CUSTOM}
           ${CONF_ZFS}
           ${CONF_SYNC}
           ${CONF_FTP}"

    for _prop in ${_CONF} ; do
        eval _value=\$${_prop}
        echo "${_prop}=${_value}"
    done
}

# Get default value for property if one is found
__get_default_prop () {
    local _property _value

    _property=${1}

    __get_jail_prop "${_property}" ${pool}/iocage/.defaults
}

# Find and return the jail's top level ZFS dataset
# Note: parameters are trusted to be valid
__find_jail () {
    local _name

    _name=${1}

    case "${_name}" in
        "ALL") __find_jail_all ;;
        "default") echo ${pool}/iocage/.defaults ;;
        *) __find_jail_by_name "${_name}" ;;
    esac
}

__find_jail_all () {
    local _uuid_regex

    _uuid_regex="[[:xdigit:]]{8}-([[:xdigit:]]{4}-){3}[[:xdigit:]]{12}"

    zfs list -Hrd1 -o name -s ${module}:tag ${pool}/iocage/jails \
    | egrep "/${_uuid_regex}$"
}

__find_jail_by_name () {
    local _name _uuid_regex _matched _count

    _name=${1}

    _uuid_regex="[[:xdigit:]]{8}-([[:xdigit:]]{4}-){3}[[:xdigit:]]{12}"

    # How this pipeline works:
    # * zfs ...
    # List the UUID and tag of every jail, sorted by tag.
    #
    # * egrep ...
    # Filter using the UUID regexp to eliminate any datasets that aren't jails.
    #
    # * awk ...
    # Try to match the given name as a prefix of either the UUID or the tag. If
    # a match is found, print it. If the name is an exact match of the tag, end
    # the search. Ending when the tag is an exact match allows tags that are a
    # prefix of other tags to be used. Because the tags are sorted, the exact
    # match will always be first.
    _matched=$(zfs list -Hrd1 -o ${module}:host_hostuuid,${module}:tag \
                   -s ${module}:tag \
                   ${pool}/iocage/jails \
               | egrep -w "${_uuid_regex}" \
               | awk -v name="^${_name}" \
                     '$1 ~ name || $2 ~ name {
                          print $1;
                          if ($2 ~ name"$")
                              exit;
                      }')
    _count=$(__wc ${_matched})

    case ${_count} in
        0) return 1 ;;
        1) echo ${pool}/iocage/jails/${_matched} ;;
        *) echo "multiple" ;;
    esac
}

# List jails.
#
# The switches are binary 0 or 1 flags of the form:
#   ${basejails}${templates}${long}${noheader}
# where a 0 indicates the flag is not active.
#
# The basejails flag filters the list to only display basejails.
# The templates flag lists only templates, which are normally suppressed.
# The long flag causes more information about the jail to be displayed.
# The noheader flag cause the header to be suppressed.
#
# The basejails and templates flags can be combined to display only
# the templates that are basejail type jails.
__list_jails () {
    local _switches _jails _jail _type _template \
          _uuid _boot _tag _jid _state \
          _ipv4 _ipv6 _vnet _interfaces \
          _vnet0_mac _vnet1_mac _vnet2_mac _vnet3_mac

    _switches=${1}

    _jails=$(__find_jail ALL)

    # All of the output in here gets piped through column for formatting.
    {
        # Print the correct header, unless suppressed.
        # _switches:
        # {don't care}{don't care}{long header?}{header suppressed?}
        case ${_switches} in

            # Print the short header.
            ??00)
                printf "%s^%s^%s^%s^%s\n" \
                       "JID" "UUID" "BOOT" "STATUS" "TAG"
                ;;

            # Print the long header.
            ??10)
                printf "%s^%s^%s^%s^%s^%s^%s^%s^%s^%s^%s^%s^%s^%s^%s^%s\n" \
                       "JID" "UUID" "BOOT" "STATUS" "TAG" "IPV4" "IPV6" \
                       "VNET" "TYPE" "INTERFACES" \
                       "VNET0_MAC" "VNET1_MAC" "VNET2_MAC" "VNET3_MAC"
                ;;

        esac

        for _jail in ${_jails} ; do

            # When asked for only basejails, skip the other jail types.
            # _switches:
            # {only basejails?}{don't care}{don't care}{don't care}
            _type=$(__get_dataset_ioc_prop type ${_jail})
            case ${_switches} in
                1???) [ ${_type} = "basejail" ] || continue ;;
            esac

            # When asked for templates, skip non-template jails.
            # Otherwise, skip templates.
            # _switches:
            # {don't care}{show templates?}{don't care}{don't care}
            _template=$(__get_dataset_ioc_prop template ${_jail})
            case ${_switches} in
                ?1??) [ ${_template} = "yes" ] || continue ;;
                ?0??) [ ${_template} = "no" ] || continue ;;
            esac

            _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_jail})
            _boot=$(__get_dataset_ioc_prop boot ${_jail})
            _tag=$(__get_dataset_ioc_prop tag ${_jail})

            _jid=$(jls -j ioc-${_uuid} jid 2>/dev/null)
            : ${_jid:="-"} # Set to "-" if empty.

            if __is_running ${_uuid} ; then
                _state="up"
            else
                _state="down"
            fi

            # Print here and skip to the next if we are doing the short list.
            # _switches:
            # {don't care}{don't care}{long list?}{don't care}
            case ${_switches} in
                ??0?)
                printf "%s^%s^%s^%s^%s\n" \
                       "${_jid}" "${_uuid}" "${_boot}" "${_state}" "${_tag}"
                continue
                ;;
            esac

            _ipv4=$(__get_dataset_ioc_prop ip4_addr ${_jail})
            _ipv6=$(__get_dataset_ioc_prop ip6_addr ${_jail})

            # Only get the ioterfaces and mac addresses if vnet is on.
            _vnet=$(__get_dataset_ioc_prop vnet ${_jail})
            if [ ${_vnet} = "on" ] ; then
                _interfaces=$(__get_dataset_ioc_prop interfaces ${_jail})
                _vnet0_mac=$(__get_dataset_ioc_prop vnet0_mac ${_jail})
                _vnet1_mac=$(__get_dataset_ioc_prop vnet1_mac ${_jail})
                _vnet2_mac=$(__get_dataset_ioc_prop vnet2_mac ${_jail})
                _vnet3_mac=$(__get_dataset_ioc_prop vnet3_mac ${_jail})
            else
                _interfaces="-"
                _vnet0_mac="-"
                _vnet1_mac="-"
                _vnet2_mac="-"
                _vnet3_mac="-"
            fi

            printf "%s^%s^%s^%s^%s^%s^%s^%s^%s^%s^%s^%s^%s^%s^%s^%s\n" \
                   "${_jid}" "${_uuid}" "${_boot}" "${_state}" "${_tag}" \
                   "${_ipv4}" "${_ipv6}" "${_vnet}" "${_type}" \
                   "${_interfaces}" "${_vnet0_mac}" "${_vnet1_mac}" \
                   "${_vnet2_mac}" "${_vnet3_mac}"

        done
    } | column -ts^ # Make a nice table with aligned columns.
}

__list_non_ioc_jails () {
    local _noheader _non_ioc_jids _jid _path _ip4 _host_hostname

    _noheader=${1}

    _non_ioc_jids=$(jls jid name | awk '$2 !~ /^ioc-/ { print $1 }')

    if [ -n "${_non_ioc_jids}" ] ; then

        if [ ${_noheader} -eq 0 ] ; then
            printf "%-+40s\n" "--- non iocage jails currently active ---"
        fi

        { # Everything in here gets formatted into a table by column.
            if [ ${_noheader} -eq 0 ] ; then
                printf "%s^%s^%s^%s\n" "JID" "PATH" "IP4" "HOSTNAME"
            fi

            for _jid in ${_non_ioc_jids} ; do
                _path=$(jls -j ${_jid} path)
                _ip4=$(jls -j ${_jid} ip4.addr)
                _host_hostname=$(jls -j ${_jid} host.hostname)
                printf "%s^%s^%s^%s\n" \
                       "${_jid}" "${_path}" "${_ip4}" "${_host_hostname}"
            done
        } | column -ts^ # Make a nice table with aligned columns.
    fi
}

__list_releases () {
    local _noheader _releases _rel

    _noheader=${1}

    _releases=$(zfs list -Hro name ${pool}/iocage/releases \
                | awk -F/ '/RELEASE$/ { print $4 }')

    if [ ${_noheader} -eq 0 ] ; then
        echo "Downloaded releases:"
    fi

    for _rel in ${_releases} ; do
        printf "%15s\n" ${_rel}
    done
}

__print_disk () {
    local _noheader _jails _jail _uuid _tag _crt _res _qta _use _ava

    _noheader=${1}

    _jails=$(__find_jail ALL)

    if [ ${_noheader} -eq 0 ] ; then
        printf "%-36s  %s\n  %-6s  %-5s  %-5s  %-5s  %-5s\n" \
               "UUID" "TAG" "CRT" "RES" "QTA" "USE" "AVA"
    fi

    for _jail in ${_jails} ; do
        _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_jail})
        _tag=$(__get_dataset_ioc_prop tag ${_jail})
        _crt=$(__get_dataset_zfs_prop compressratio ${_jail})
        _res=$(__get_dataset_zfs_prop reservation ${_jail})
        _qta=$(__get_dataset_zfs_prop quota ${_jail})
        _use=$(__get_dataset_zfs_prop used ${_jail})
        _ava=$(__get_dataset_zfs_prop available ${_jail})

        printf "%-36s  %s\n  %-6s  %-5s  %-5s  %-5s  %-5s\n" \
               "${_uuid}" "${_tag}" \
               "${_crt}" "${_res}" "${_qta}" "${_use}" "${_ava}"
    done
}

__print_disk_parsable () {
    local _noheader

    _noheader=${1}

    if [ ${_noheader} -eq 0 ] ; then
        echo "UUID CRT RES QTA USE AVA"
    fi

    zfs get -Hpo value -rd1 \
        ${module}:host_hostuuid,compressratio,reservation,quota,used,available \
        ${pool}/iocage/jails \
    | awk 'NR > 6 { printf "%s%s", $0, (NR % 6 ? " " : "\n") }'
}

__find_mypool () {
    local _found _pools _pool _mypool _altroot

    _found=0
    _pools=$(zpool list -Ho name)

    for _pool in ${_pools} ; do
        _mypool=$(__get_dataset_ioc_prop active ${_pool})
        _altroot=$(zpool get -Ho value altroot ${_pool})

        if [ "${_mypool}" = "yes" ] && [ "${_altroot}" = "-" ] ; then
            _found=1
            break
        fi
    done

    if [ ${_found} -ne 1 ] ; then
        if [ -n "${RC_PID}" ] ; then
            # RC_PID set means we are running from rc
            __fatal_error "No pool for iocage jails found on boot."
        fi

        echo "Setting up zpool [${_pool}] for iocage usage..."
        echo "If you wish to change zpool, use 'iocage activate'"
        __require_root
        __activate ${_pool}
    fi

    export pool=${_pool}
}

# Get jail properties
__get_jail_prop () {
    local _property _dataset _found _uuid _status _CONF _prop _value

    _property=${1}
    _dataset=${2}

    _found=0

    # "status" pseudo-property
    if [ ${_property} == "status" ] || [ ${_property} == "all" ] ; then
        _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
        if __is_running ${_uuid} ; then
            _status="up"
        else
            _status="down"
        fi
        if [ ${_property} == "all" ] ; then
            _found=1
            echo "status:${_status}"
        else
            echo ${_status}
            return
        fi
    fi

    _CONF="${CONF_NET}
           ${CONF_JAIL}
           ${CONF_RCTL}
           ${CONF_CUSTOM}
           ${CONF_SYNC}
           ${CONF_FTP}"

    for _prop in ${_CONF} ; do
        if [ ${_prop} == ${_property} ] ; then
            _found=1
            __get_dataset_ioc_prop ${_prop} ${_dataset}
            return

        elif [ ${_property} == "all" ] ; then
            _found=1
            _value=$(__get_dataset_ioc_prop ${_prop} ${_dataset})
            echo "${_prop}:${_value}"
        fi
    done

    if [ ${_found} -ne 1 ] ; then
        for _prop in ${CONF_ZFS} ; do
            if [ ${_prop} == ${_property} ] ; then
                _found=1
                __get_dataset_zfs_prop ${_prop} ${_dataset}
                return
            fi
        done
    fi

    [ ${_found} -eq 1 ] ||
        __fatal_error "Unsupported property: ${_property}"
}

__get_all_prop () {
    local _noheader _prop _jails _capsprop _jail _uuid _value

    _noheader=${1}
    _prop=${2}

    _jails=$(__find_jail ALL)

    {
        if [ ${_noheader} -eq 0 ] ; then
            _capsprop=$(echo ${_prop} | tr 'a-z' 'A-Z')
            printf "%s^%s\n" "UUID" "${_capsprop}"
        fi

        for _jail in ${_jails} ; do
            _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_jail})
            _value=$(__get_jail_prop ${_prop} ${_jail}) ||
                __fatal_error "Aborting."

            printf "%s^%s\n" "${_uuid}" "${_value}"
        done
    } | column -ts^
}

__get_dataset_zfs_prop () {
    local _prop _dataset

    _prop=${1}
    _dataset=${2}

    zfs get -Ho value ${_prop} ${_dataset}
}

__get_dataset_ioc_prop () {
    local _prop _dataset

    _prop=${1}
    _dataset=${2}

    zfs get -Ho value ${module}:${_prop} ${_dataset}
}

__runtime () {
    local _dataset _fulluuid _params _param

    _dataset=${1}

    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})

    # this all seems a bit silly...
    _params=$(jls -nj ioc-${_fulluuid})
    __require_not_empty "${_params}" "Jail ${_fulluuid} is not up..."

    for _param in ${_params} ; do
        echo "  ${_param}"
    done
}

# search for executable prestart|poststart|prestop|poststop in jail_dir first,
# else use jail exec_<type> property unchanged
__findscript () {
    local _dataset _type _mountpoint

    _dataset=${1}
    _type=${2}

    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})

    if [ -x "${_mountpoint}/${_type}" ]; then
        echo "${_mountpoint}/${_type}"
    else
        echo $(__get_dataset_ioc_prop exec_${_type} ${_dataset})
    fi
}

# Test if a jail is running.
#
# Returns 0 if the jail is up, 1 if otherwise.
#
# ${1}: UUID of the jail in question
__is_running () {
    local _uuid

    _uuid=${1}

    jls name | grep -q ioc-${_uuid}
}

__status () {
    local _dataset _uuid

    _dataset=${1}

    _uuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})

    if __is_running ${_uuid} ; then
        echo "up"
    else
        echo "down"
    fi
}

# Show the status of all jails known to iocage.
#
# ${1}: suppress the header line?
__status_all () {
    local _noheader _uuids _uuid

    _noheader=${1}

    _uuids=$(zfs list -Hrd1 -o ${module}:host_hostuuid ${pool}/iocage/jails \
             | awk 'NR > 1') # Awk for trimming the ${pool}/iocage/jails line

    {
        [ ${_noheader} -eq 0 ] && printf "%s^%s\n" "UUID" "STATUS"
        for _uuid in ${_uuids} ; do
            echo -n "${_uuid}^"
            __status ${pool}/iocage/jails/${_uuid}
        done
    } | column -ts^
}
