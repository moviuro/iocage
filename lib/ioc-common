#!/bin/sh

# Export every property specified on command line ----------------------
__export_props () {
    local _i

    for _i in "${@}" ; do
        if echo ${_i} | egrep -q "^[[:alnum:]][[:alnum:]_]+=.+" ; then
            export "${_i}"
            export "iocset_${_i}"
        fi
    done

    case "${tag}" in
        "ALL"|"default")
            __fatal_error "Invalid tag: ${tag} is a reserved keyword"
            ;;
    esac
}

# Echo to stderr -------------------------------------------------------
__stderr () {
    echo "${@}" >&2
}

# Print an error message to stderr -------------------------------------
#
# ${1}: error message to display
__error () {
    __stderr "ERROR: ${1}"
}

# Print an error message to stderr and exit the current shell ----------
#
# General note: if a function is called in a subshell, exiting only
# exits the subshell, not the whole script!
#
# ${1}: error message to display before exiting
__fatal_error () {
    __error "${1}"
    exit 1
}

# Print an info message to stderr -------------------------------------
#
# ${1}: message to display
__info () {
    __stderr "INFO: ${1}"
}

# Print the number of parameters passed to this function ---------------
__wc () {
    echo ${#}
}

# Require that we are being run as root --------------------------------
#
# If the user is not root, an error message is displayed and the program
# exits with a nonzero exit code.
__require_root () {
    local _message

    _message=${1:-"This command must be run as root."}

    [ $(whoami) == "root" ] ||
        __fatal_error "${_message}"
}

# Require that a given value is a single word --------------------------
#
# If the given string value is a single word, nothing happens.
# Otherwise, the error is considered fatal. An error description is
# displayed, and the shell exits with a nonzero exit status.
#
# Note: To properly use this function, the first parameter must be
# quoted when passed. For example: `__require_single_word "${_name}"`
#
# ${1}: the value to test
# ${2}: optional description of the error if the check fails
#       the default description is "Invalid value"
__require_single_word () {
    local _value _description

    _value=${1}
    _description=${2:-"Invalid value"}
    _words=$(__wc "${_value}")

    [ "${_words}" -eq 1 ] || __fatal_error "${_description}"
}

# Require that a given release has been fetched ------------------------
#
# ${1}: (optional) the name of the release, without the patch level
#       the default is to use the global value for ${release}
__require_release_fetched () {
    local _release

    _release=${1:-${release}}

    zfs list -Hrd1 -o name ${pool}/iocage/releases | grep -q ${_release} ||
        __fatal_error "Release ${_release} not found locally, run fetch first."
}

# Require that a given value is not empty ------------------------------
#
# If the length of the string value is nonzero, nothing happens.
# Otherwise, the error is considered fatal. An error description is
# displayed, and the shell exits with a nonzero exit status.
#
# ${1}: the value to test
# ${2}: optional description of the error if the check fails
#       the default description is "Missing value"
__require_not_empty () {
    local _value _description

    _value=${1}
    _description=${2:-"Missing value"}

    [ -n "${_value}" ] || __fatal_error "${_description}"
}

# Require that the given name is not empty -----------------------------
#
# If the name string is empty, a fatal error occurs, printing a message
# to stderr and exiting the current shell. Otherwise, nothing happens.
#
# This function is a specialization of the function __require_not_empty
# for the common pattern of testing for a missing UUID or tag.
#
# ${1}: the UUID or tag, usually "${_name}" by convention
__require_name_not_empty () {
    local _name _description

    _name=${1}
    _description="Missing UUID or tag!"

    __require_not_empty "${_name}" "${_description}"
}

# Require that the given name is not "default" -------------------------
#
# If the name string is "default", a fatal error occurs, printing a
# message to stderr and exiting the current shell. Otherwise, nothing
# happens.
#
# This function is for the common pattern of rejecting "default" when
# used as a jail name for functions that do not support the "default"
# pattern.
#
# ${1}: the UUID or tag, usually "${_name}" by convention
__require_name_not_default () {
    local _name _description

    _name=${1}
    _description="The tag \"default\" is not supported by this command!"

    [ "${_name}" != "default" ] || __fatal_error "${_description}"
}

# Require that the given name is not "ANY" -----------------------------
#
# If the name string is "ANY", a fatal error occurs, printing a message
# to stderr and exiting the current shell. Otherwise, nothing happens.
#
# This function is for the common pattern of rejecting "ALL" when used
# as a jail name for functions that do not support the "ALL" pattern.
#
# ${1}: the UUID or tag, usually "${_name}" by convention
__require_name_not_all () {
    local _name _description

    _name=${1}
    _description="ALL is not supported by this command!"

    [ "${_name}" != "ALL" ] || __fatal_error "${_description}"
}

# Require that the given name is not more than a single word -----------
#
# If the name is multiple words, a fatal error occurs, printing a
# message to stderr and exiting the current shell. Otherwise, nothing
# happens.
#
# ${1}: the UUID or tag, usually "${_name}" by convention
__require_name_single_word () {
    local _name _description

    _name=${1}
    _description="Invalid jail name: ${_name}"

    __require_single_word "${_name}" "${_description}"
}

# Require that the given dataset is not more than a single word --------
#
# If the dataset is multiple words, a fatal error occurs, printing a
# message to stderr and exiting the current shell. Otherwise, nothing
# happens.
#
# ${1}: the dataset to check
# ${2}: (optional) the UUID or tag corresponding to the dataset
__require_dataset_single_word () {
    local _dataset _name _description

    _dataset=${1}
    _name=${2:-"jail"}
    _description="Invalid dataset: ${_dataset} for ${_name}"

    __require_single_word "${_dataset}" "${_description}"
}

# Require that the given dataset is not empty --------------------------
#
# If the dataset string is empty, a fatal error occurs, printing a
# message to stderr and exiting the current shell. Otherwise, nothing
# happens.
#
# This function is a specialization of the function __require_not_empty
# for the common pattern of testing for a UUID or tag that did not match
# any jails.
#
# ${1}: the dataset, usually "${_dataset}" by convention
# ${2}: (optional) the UUID or tag that was used to look up the dataset,
#       usually "${_name}" by convention
#       if omitted, "Dataset" takes its place in the error description
__require_dataset_not_empty () {
    local _dataset _name _description

    _dataset=${1}
    _name=${2}
    _description="${_name:-Dataset} not found."

    __require_not_empty "${_dataset}" "${_description}"
}

# Require that the given dataset is not "multiple" ---------------------
#
# If the dataset string is empty, a fatal error occurs, printing a
# message to stderr and exiting the current shell. Otherwise, nothing
# happens.
#
# This function is for the common pattern of testing for a UUID prefix
# matching multiple full UUIDs.
#
# ${1}: the dataset, usually "${_dataset}" by convention
# ${2}: (optional) the corresponding UUID or tag
__require_dataset_not_multiple () {
    local _dataset _description

    _dataset=${1}
    _name=${2:-"the given UUID or tag"}
    _description="Multiple matching UUIDs for ${_name}"

    [ "${_dataset}" != "multiple" ] || __fatal_error "${_description}"
}

# Is an item in a space-seperated list?
#
# ${1}: Argument to check for presence
# other args: Arguments to check ${1} in
__is_in_ssv () {
    local _word _list _found _item

    _word=${1}
    shift
    _list="${@}"
    _found=0

    for _item in ${_list} ; do
        if [ ${_item} == ${_word} ] ; then
            _found=1
            return
        fi
    done

    [ ${_found} -eq 1 ]
}

# Require that the first argument is in the second
#
# ${1}: Argument to check for presence
# other args: Arguments to check ${1} in
__require_in_ssv () {
    __is_in_ssv "${@}" || __fatal_error "Not found: ${_word}"
}

# Check the validity of the given UUID or tag --------------------------
#
# ${1}: the UUID or tag to check
__check_name () {
    local _name

    _name=${1}

    __require_name_not_empty "${_name}"
    __require_name_not_all "${_name}"
    __require_name_not_default "${_name}"
    __require_name_single_word "${_name}"
}

# Check the validity of the given UUID or tag --------------------------
#
# default is OK.
#
# ${1}: the UUID or tag to check
__check_name_default () {
    local _name

    _name=${1}

    __require_name_not_empty "${_name}"
    __require_name_not_all "${_name}"
    __require_name_single_word "${_name}"
}

# Check the validity of the given UUID or tag --------------------------
#
# ALL is OK.
#
# ${1}: the UUID or tag to check
__check_name_all () {
    local _name

    _name=${1}

    __require_name_not_empty "${_name}"
    __require_name_not_default "${_name}"
    __require_name_single_word "${_name}"
}

# Check the validity of the given UUID or tag --------------------------
#
# ALL/default is OK.
#
# ${1}: the UUID or tag to check
__check_name_all_default () {
    local _name

    _name=${1}

    __require_name_not_empty "${_name}"
    __require_name_single_word "${_name}"
}

# Check the validity of the given dataset name -------------------------
#
# ${1}: the dataset to check
# ${2}: (optional) the UUID or tag corresponding to the given dataset
__check_dataset () {
    local _name _dataset

    _dataset=${1}
    _name=${2:-"the given UUID or tag"}

    __require_dataset_not_empty "${_dataset}" "${_name}"
    __require_dataset_not_multiple "${_dataset}" "${_name}"
    __require_dataset_single_word "${_dataset}" "${_name}"
}

# Check the validity of the given property -----------------------------
#
# ${1}: property to check for existence
__check_prop_name () {
    local _property _found _CONF _prop

    _property=${1}
    _found=0
    _CONF="${CONF_NET}
           ${CONF_JAIL}
           ${CONF_RCTL}
           ${CONF_CUSTOM}
           ${CONF_SYNC}
           ${CONF_FTP}
           ${CONF_ZFS}"

    __require_name_not_empty "${_property}"
    __require_name_not_default "${_property}"
    __require_name_single_word "${_property}"
    __require_in_ssv "${_property}" ${_CONF}
}

# Translate a property name to a ZFS property --------------------------
#
# ${1}: a property
__get_zfs_prop () {
    local _found _property _CONF _prop

    _found=0
    _property=${1}
    _CONF="${CONF_NET}
           ${CONF_JAIL}
           ${CONF_RCTL}
           ${CONF_CUSTOM}
           ${CONF_SYNC}
           ${CONF_FTP}"

    __check_prop_name ${_property}

    if __is_in_ssv "${_property}" ${_CONF} ; then
        _found=1
        echo ${module}:${_property}
        return
    fi

    if [ ${_found} -eq 0 ] ; then
        if __is_in_ssv "${_property}" ${CONF_ZFS} ; then
            _found=1
            echo ${_property}
            return
        fi
    fi
}

# Set properties -------------------------------------------------------
__set_jail_prop () {
    local _property _dataset _pname _pval _CONF _default

    _property=${1}
    _dataset=${2}

    _pname=${_property%%=*}
    __require_not_empty "${_pname}" "Set failed, incorrect property syntax!"

    _pval=${_property#*=}

    # Catch some special cases.
    case ${_pname} in
        "ip4_addr")
            # Check if the user wants us to generate an automatic address.
            _pval=$(__sub_autoip4 "${_pval}") ||
                __fatal_error "Failed to set automatic IPv4 address."
            ;;
        "tag")
            case "${_pval}" in
                "ALL"|"default")
                    __fatal_error "Invalid tag: ${tag} is a reserved keyword"
                    ;;
            esac
            __set_dataset_ioc_prop tag="${_pval}" ${_dataset}
            __replace_tag_symlink ${_dataset}
            return
            ;;
        "hack88")
            if __is_running ${_dataset##*/} ; then
                __fatal_error "Cannot update this property on a running jail."
            fi
            __set_dataset_ioc_prop hack88="${_pval}" ${_dataset}
            __update_mountpoint ${_dataset}
            return
            ;;
    esac

    _CONF="${CONF_NET}
           ${CONF_JAIL}
           ${CONF_RCTL}
           ${CONF_CUSTOM}
           ${CONF_SYNC}
           ${CONF_FTP}"

    if __is_in_ssv "${_pname}" ${_CONF} ; then
        __set_dataset_ioc_prop ${_pname}="${_pval}" ${_dataset}
    elif __is_in_ssv "${_pname}" ${CONF_ZFS} ; then
        # We have a few properties that should be read-only through iocage.
        eval _default=\$${_pname}
        [ "${_default}" != "readonly" ] ||
            __fatal_error "This property is read-only."

        __set_dataset_zfs_prop ${_pname}="${_pval}" ${_dataset}
    else
        __fatal_error "Unsupported property: ${_pname}!"
    fi
}

__set_dataset_zfs_prop () {
    local _property _dataset

    _property=${1}
    _dataset=${2}

    zfs set "${_property}" ${_dataset}
}

__set_dataset_ioc_prop () {
    local _property _dataset _pname

    _property=${1}
    _dataset=${2}
    _pname=${_property%%=*}

    zfs set ${module}:"${_property}" ${_dataset}
}

__console () {
    local _dataset _login_flags

    _dataset=${1}

    _login_flags=$(__get_dataset_ioc_prop login_flags ${_dataset})

    __exec ${_dataset} login ${_login_flags}
}

__exec () {
    local _jexecopts _opt _dataset _fulluuid _exec_fib _jexec

    _jexecopts=""

    # check for -U or -u to pass to jexec
    OPTIND=1
    while getopts ":u:U:" _opt ; do
        case "${_opt}" in
            [uU]) _jexecopts="${_jexecopts} -${_opt} ${OPTARG}" ;;
            "?") __fatal_error "Invalid exec option: -${OPTARG}" ;;
        esac
    done
    shift $((OPTIND - 1))

    _dataset=${1}
    shift

    _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
    _exec_fib=$(__get_dataset_ioc_prop exec_fib ${_dataset})

    if [ ${_exec_fib} -ne 0 ] ; then
        _jexec="setfib ${_exec_fib} jexec"
    else
        _jexec="jexec"
    fi

    ${_jexec} ${_jexecopts} ioc-${_fulluuid} "${@}"
}

__exec_all () {
    local _jexecopts _opt _jails _jail

    _jexecopts=""

    # check for -U or -u to pass to jexec
    OPTIND=1
    while getopts ":u:U:" _opt ; do
        case "${_opt}" in
            [uU]) _jexecopts="${_jexecopts} -${_opt} ${OPTARG}" ;;
            "?") __fatal_error "Invalid exec option: -${OPTARG}" ;;
        esac
    done
    shift $((OPTIND - 1))

    _jails=$(__find_jail ALL)

    for _jail in ${_jails} ; do
        __exec ${_jexecopts} ${_jail} "${@}"
    done
}

__chroot () {
    local _dataset _mountpoint

    _dataset=${1}
    _mountpoint=$(__get_dataset_zfs_prop mountpoint ${_dataset})

    shift

    chroot ${_mountpoint}/root "${@}"
}

# Fetch release and prepare base ZFS filesystems -----------------------
__fetch_release () {
    local _file _non_interactive _release_root

    zfs list -Hrd1 -o name ${pool}/iocage/releases \
    | grep -xq ${pool}/iocage/releases/${release}
    if [ ${?} -ne 0 ] ; then
        zfs create -o compression=lz4 -p \
            ${pool}/iocage/releases/${release}/root
        zfs create -o compression=lz4 -p \
            ${pool}/iocage/download/${release}
    fi

    cd ${iocroot}/download/${release}
    for _file in ${ftpfiles} ; do
        if [ ! -e "${_file}" ] ; then
            fetch "${ftpproto}://${ftphost}${ftpdir}/${_file}"
            [ ${?} -eq 0 ] ||
                __fatal_error "Failed fetching ${_file}..."
        fi
    done

    for _file in ${ftpfiles} ; do
        if [ -e "${_file}" ] ; then
            __info "Extracting ${_file}"
            chflags -R noschg ${iocroot}/releases/${release}/root
            tar -C ${iocroot}/releases/${release}/root -xf ${_file}
        fi
    done

    __info "Updating release to latest patch"
    sleep 2

    if [ $(uname -U) -lt 1002000 ] ; then
        _non_interactive=""
    else
        _non_interactive="--not-running-from-cron"
    fi

    _release_root=${iocroot}/releases/${release}/root

    if [ -e ${_release_root}/etc/freebsd-update.conf ] ; then

        env UNAME_r="${release}" env PAGER="/bin/cat" \
            /usr/sbin/freebsd-update \
                ${_non_interactive} \
                -b ${_release_root} \
                -f ${_release_root}/etc/freebsd-update.conf \
                -d ${_release_root}/var/db/freebsd-update/ \
                fetch

        env UNAME_r="${release}" env PAGER="/bin/cat" \
            /usr/sbin/freebsd-update \
                -b ${_release_root} \
                -f ${_release_root}/etc/freebsd-update.conf \
                -d ${_release_root}/var/db/freebsd-update/ \
                install

    fi

    if [ ! -d ${iocroot}/log ] ; then
        mkdir ${iocroot}/log
    fi

    __info "Copying release files to base jail"

    __create_basejail ${release}

    chflags -R noschg ${iocroot}/base/${release}/root
    tar --exclude \.zfs --exclude usr/sbin/chown \
        -C ${iocroot}/releases/${release}/root -cf - . \
    | tar --exclude \.zfs --exclude usr/sbin/chown \
          -C ${iocroot}/base/${release}/root -xf -

    if [ ! -e "${iocroot}/base/${release}/root/usr/sbin/chown" ] ; then
       cd ${iocroot}/base/${release}/root/usr/sbin && ln -s ../bin/chgrp chown
    fi

    etcupdate extract -D ${iocroot}/base/${release}/root \
              -s ${iocroot}/base/${release}/root/usr/src

    __info "Fetch completed"
}
