#!/bin/sh
#set -x
# Process command line options-------------------------
__parse_cmd () {
    local _cmd

    while [ ${#} -gt 0 ] ; do
        _cmd=${1}
        shift
        case "${_cmd}" in
            activate)
                __require_root
                __cmd_activate "${@}"
                exit
                ;;
            cap)
                __require_root
                __cmd_cap "${@}"
                exit
                ;;
            chroot)
                __require_root
                __cmd_chroot "${@}"
                exit
                ;;
            clean)
                __require_root
                __cmd_clean "${@}"
                exit
                ;;
            clone)
                __require_root
                __cmd_clone "${@}"
                exit
                ;;
            console)
                __require_root
                __cmd_console "${@}"
                exit
                ;;
            create)
                __require_root
                __cmd_create "${@}"
                exit
                ;;
            deactivate)
                __require_root
                __cmd_deactivate "${@}"
                exit
                ;;
            defaults)
                __print_defaults
                exit
                ;;
            destroy)
                __require_root
                __cmd_destroy "${@}"
                exit
                ;;
            df)
                __cmd_df "${@}"
                exit
                ;;
            exec)
                __require_root
                __cmd_exec "${@}"
                exit
                ;;
            fetch)
                __require_root
                __cmd_fetch "${@}"
                exit
                ;;
            get)
                __cmd_get "${@}"
                exit
                ;;
            help)
                __help
                exit
                ;;
            inuse)
                __require_root
                __cmd_inuse "${@}"
                exit
                ;;
            limits)
                __require_root
                __cmd_limits "${@}"
                exit
                ;;
            list)
                __cmd_list "${@}"
                exit
                ;;
            promote)
                __require_root
                __cmd_promote "${@}"
                exit
                ;;
            rcboot)
                __require_root
                __cmd_rcboot
                exit
                ;;
            rcshutdown)
                __require_root
                __cmd_rcshutdown
                exit
                ;;
            reset)
                __require_root
                __cmd_reset "${@}"
                exit
                ;;
            restart)
                __require_root
                __cmd_restart "${@}"
                exit
                ;;
            rollback)
                __require_root
                __cmd_rollback "${@}"
                exit
                ;;
            runtime)
                __require_root
                __cmd_runtime "${@}"
                exit
                ;;
            set)
                __require_root
                __cmd_set "${@}"
                exit
                ;;
            snaplist)
                __cmd_snaplist "${@}"
                exit
                ;;
            snapremove)
                __require_root
                __cmd_snapremove "${@}"
                exit
                ;;
            snapshot)
                __require_root
                __cmd_snapshot "${@}"
                exit
                ;;
            start)
                __require_root
                __cmd_start "${@}"
                exit
                ;;
            status)
                __cmd_status "${@}"
                exit
                ;;
            stop)
                __require_root
                __cmd_stop "${@}"
                exit
                ;;
            uncap)
                __require_root
                __cmd_uncap "${@}"
                exit
                ;;
            update)
                __require_root
                __cmd_update "${@}"
                exit
                ;;
            upgrade)
                __require_root
                __cmd_upgrade "${@}"
                exit
                ;;
            *)
                __usage
                exit
                ;;
        esac
        shift
    done
}

__cmd_activate () {
    local _pool

    _pool=${1}

    if [ -z "${_pool}" ] ; then
        __find_mypool
    else
        __require_single_word "${_pool}" "Invalid pool name!"
        __activate ${_pool}
    fi
}

__cmd_cap () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __rctl_limits ${_dataset}
}

__cmd_chroot () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    shift
    __chroot ${_dataset} "${@}"
}

__cmd_clean () {
    local _force _all _releases _jails _opt _destroying _answer

    _force=0
    _all=0
    _releases=0
    _jails=0

    OPTIND=1
    while getopts ":farj" _opt; do
        case ${_opt} in
            "f") _force=1 ;;
            "a") _all=1 ;;
            "r") _releases=1 ;;
            "j") _jails=1 ;;
            "?") __fatal_error "Invalid clean option: -${OPTARG}" ;;
        esac
    done

    if [ ${_force} -eq 0 ] ; then
        case ${_all}${_releases}${_jails} in
            1??) _destroying="${pool}/iocage" ;;
            011) _destroying="all releases and all jails" ;;
            010) _destroying="all releases" ;;
            001) _destroying="all jails" ;;
            *) __fatal_error "Unreachable condition." ;;
        esac

        echo
        echo "WARNING: This will destroy ${_destroying}"
        echo
        echo -n "Are you sure? y[N]: "
        read _answer

        if [ "${_answer}" != "Y" -a "${_answer}" != "y" ] ; then
            echo "Command not confirmed. No action taken."
            exit 1
        fi
    fi

    if [ ${_all} -eq 1 ] ; then
        __clean_all
    else
        [ ${_releases} -eq 1 ] && __clean_releases
        [ ${_jails} -eq 1 ] && __clean_jails
    fi

    return 0
}

__cmd_clone () {
    local _props _fstab _opt _key _switches _name _snapshot _dataset

    _props=0
    _fstab=0

    OPTIND=1
    while getopts ":FP" _opt ; do
        case ${_opt} in
            "P") _props=1 ;;
            "F") _fstab=1 ;;
            "?") __fatal_error "Invalid clone option: -${OPTARG}" ;;
        esac
    done
    shift $((OPTIND - 1))

    _switches=${_props}${_fstab}

    _name=${1%%@*}
    __check_name "${_name}"

    _snapshot=${1#${_name}}
    _snapshot=${_snapshot#@} # Remove leading @ (separate step in case no @)

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    shift
    __export_props "${@}"
    __clone_jail ${_switches} ${_dataset} ${_snapshot}
}

__cmd_console () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __console ${_dataset}
}

__cmd_create () {
    __export_props "${@}"
    __create_jail "${@}"
}

__cmd_deactivate () {
    local _pool

    _pool=${1}
    __require_not_empty "${_pool}" "Missing pool name!"
    __require_single_word "${_pool}" "Invalid pool name!"

    __deactivate ${_pool}
}

__cmd_destroy () {
    local _force _opt _name _answer _dataset _destroying _fulluuid _tag _origin

    _force=0

    OPTIND=1
    while getopts ":f" _opt ; do
        case ${_opt} in
            "f") _force=1 ;;
            "?") __fatal_error "Invalid destroy option: -${OPTARG}" ;;
        esac
    done
    shift $((OPTIND - 1))

    _name=${1}
    __check_name_default "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    if [ ${_force} -eq 0 ] ; then
        if [ "${_name}" = "default" ] ; then
            _destroying="the user defaults!"
        else
            _fulluuid=$(__get_dataset_ioc_prop host_hostuuid ${_dataset})
            _tag=$(__get_dataset_ioc_prop tag ${_dataset})
            _destroying="${_fulluuid} (${_tag})"
        fi
        echo
        echo "WARNING: This will destroy ${_destroying}"
        echo "Dataset: ${_dataset}"
        _origin=$(__get_dataset_zfs_prop origin ${_dataset})
        if [ ${_origin} != "-" ] ; then
            echo
            echo -n "WARNING: This will also destroy the origin snapshot if no"
            echo " other clones remain!"
            echo "Origin: ${_origin}"
        fi
        echo
        echo -n "Are you sure ? y[N]: "
        read _answer

        if [ "${_answer}" != "Y" -a "${_answer}" != "y" ] ; then
            echo "Command not confirmed.  No action taken."
            exit 1
        fi
    fi

    __destroy_jail ${_dataset} ${_force}
}

__cmd_df () {
    local _noheader _parsable _opt _ioc

    _noheader=0
    _parsable=0

    OPTIND=1
    while getopts ":Hp" _opt ; do
        case ${_opt} in
            "H") _noheader=1 ;;
            "p") _parsable=1 ;;
            "?") __fatal_error "Invalid df option: -${OPTARG}" ;;
        esac
    done

    if [ ${_parsable} -eq 1 ] ; then
        # Machine-parsable
        __print_disk_parsable ${_noheader}
    else
        # Human-readable
        __print_disk ${_noheader}
    fi
}

__cmd_exec () {
    local _jexecopts _opt _name _dataset

    _jexecopts=""

    # Check for -U or -u to pass to jexec.
    OPTIND=1
    while getopts ":u:U:" _opt ; do
        case "${_opt}" in
            [uU]) _jexecopts="${_jexecopts} -${_opt} ${OPTARG}";;
            "?") __fatal_error "Invalid exec option: -${OPTARG}";;
        esac
    done
    shift $((OPTIND - 1))

    _name=${1}
    __check_name_all "${_name}"
    shift

    if [ ${_name} = "ALL" ]; then
        __exec_all ${_jexecopts} "${@}"
    else
        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}

        __exec ${_jexecopts} ${_dataset} "${@}"
    fi
}

__cmd_fetch () {
    local _release _match _rel

    __export_props "${@}"

    __require_not_empty "${ftpproto}" "Missing value for ftpproto."
    __require_single_word "${ftpproto}" "Invalid value for ftpproto."

    # ftphost can be empty for "file" proto
    __require_single_word "${ftphost}" "Invalid value for ftphost."

    # ftpdir at least needs a "/" but we can accomodate spaces in the path
    __require_not_empty "${ftpdir}" "Missing value for ftpdir."

    # ftpfiles must not be empty but can often be multiple words
    __require_not_empty "${ftpfiles}" "Missing value for ftpfiles."

    if [ -z "${iocset_release}" ] ; then
        __print_release

        echo -n "Please select a release [${release}]: "
        read _release
    else
        _release=${iocset_release}
    fi

    # If a release was specified, make sure it is supported. Otherwise, we use
    # the default release.
    if [ -n "${_release}" ] ; then
        _match=0
        for _rel in ${supported_releases} ; do
            if [ "${_release}" == "${_rel}" ] ; then
                # The requested release is supported; override the default.
                release=${_release}
                _match=1
                break
            fi
        done

        # Error out if we didn't match a supported release.
        [ ${_match} -eq 1 ] ||
            __fatal_error "Invalid release specified: ${_answer}"
    fi

    __fetch_release
}

__cmd_init_host () {
    local _remote _pool

    _remote=${1}
    __require_not_empty "${_remote}" "Missing arguments!"
    __require_single_word "${_remote}" "Invalid remote host!"

    _pool=${2}
    __require_not_empty "${_pool}" "Missing pool name!"
    __require_single_word "${_pool}" "Invalid pool name!"

    __init_host ${_remote} ${_pool}
}

__cmd_inuse () {
    local _name _dataset

    _name=${1}

    if [ -z "${_name}" ] ; then
        __rctl_inuse_all
    else
        __check_name "${_name}"

        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}

        __rctl_inuse ${_dataset}
    fi
}

__cmd_limits () {
    local _name _dataset

    _name=${1}

    if [ -z "${_name}" ] ; then
        __rctl_list_all
    else
        __check_name "${_name}"

        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}

        __rctl_list ${_dataset}
    fi
}

__cmd_list () {
    local _noheader _basejails _long _nonioc _releases _templates _opt _switches

    _noheader=0
    _basejails=0
    _long=0
    _nonioc=0
    _releases=0
    _templates=0

    OPTIND=1
    while getopts ":Hblnrt" _opt ; do
        case ${_opt} in
            "H") _noheader=1 ;;
            "b") _basejails=1 ;;
            "l") _long=1 ;;
            "n") _nonioc=1 ;;
            "r") _releases=1 ;;
            "t") _templates=1 ;;
            "?") __fatal_error "Invalid list option: -${OPTARG}" ;;
        esac
    done

    if [ ${_releases} -eq 1 ] ; then
        __list_releases ${_noheader}
    else
        # Concatenating the flags into one string like this makes it easy
        # to pattern match conditions using case statements.
        _switches=${_basejails}${_templates}${_long}${_noheader}

        __list_jails ${_switches}

        if [ ${_nonioc} -eq 1 ] ; then
            __list_non_ioc_jails ${_noheader}
        fi
    fi
}

__cmd_promote () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __promote ${_dataset}
}

__cmd_rcboot () {
    __rc_jails boot
}

__cmd_rcshutdown () {
    __rc_jails shutdown
}

__cmd_reset () {
    local _name _force _answer _dataset

    if [ "${1}" != "-f" ] ; then
        _name=${1}
        _force=0
    else
        _name=${2}
        _force=1
    fi

    __check_name_all "${_name}"

    if [ ${_name} == "ALL" ] ; then
        if [ ${_force} -eq 0 ] ; then
            echo
            echo "WARNING: This will reset ALL jails!"
            echo
            echo -n "Are you sure? y[N]: "
            read _answer

            if [ "${_answer}" != "Y" ] && [ "${_answer}" != "y" ] ; then
                echo "Command not confirmed.  No action taken."
                exit 1
            fi
        fi

        echo "Resetting all jails."

        __reset_jail_props_all
    else
        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}

        __reset_jail_props ${_dataset}
    fi
}

__cmd_restart () {
    local _restart_cmd _opt _name _dataset

    _restart_cmd="__soft_restart_jail"

    OPTIND=1
    while getopts ":H" _opt ; do
        case ${_opt} in
            "H") _restart_cmd="__hard_restart_jail" ;;
            "?") __fatal_error "Invalid restart option: -${OPTARG}" ;;
        esac
    done
    shift $((OPTIND - 1))

    for _name in "${@}" ; do
        __check_name "${_name}"

        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}

        ${_restart_cmd} ${_dataset}
    done
}

__cmd_rollback () {
    local _name _snapshot _dataset

    _name=${1%%@*}
    __check_name "${_name}"

    _snapshot=${1#${_name}}
    _snapshot=${_snapshot#@} # Remove leading @ (separate step in case no @)
    __require_not_empty "${_snapshot}" "Missing snapshot name!"
    __require_single_word "${_snapshot}" "Invalid snapshot name: ${_snapshot}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __rollback ${_dataset} ${_snapshot}
}

__cmd_runtime () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __runtime ${_dataset}
}

__cmd_set () {
    local _bak_IFS _properties _name _dataset _property

    _bak_IFS="$IFS"
    _properties="${1}"
    shift
    __require_not_empty "${_properties}" "Missing arguments!"

    for _name in "${@}" ; do
        __check_name_default "${_name}"

        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}

        __export_props "${@}"

        IFS=","
        for _property in ${_properties} ; do
            IFS="${_bak_IFS}"
            __set_jail_prop "${_property}" ${_dataset}
        done
    done
}

__cmd_snaplist () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __snaplist ${_dataset}
}

__cmd_snapremove () {
    local _name _snapshot _dataset

    _name=${1%%@*}
    __check_name_all "${_name}"

    _snapshot=${1#${_name}}
    _snapshot=${_snapshot#@} # Remove leading @ (separate step in case no @)
    __require_not_empty "${_snapshot}" "Missing snapshot name!"
    __require_single_word "${_snapshot}" "Invalid snapshot name: ${_snapshot}"

    if [ ${_name} = "ALL" ] ; then
        _dataset=${pool}/iocage/jails
    else
        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}
    fi

    __snapremove ${_dataset} ${_snapshot}
}

__cmd_snapshot () {
    local _name _snapshot _dataset

    _name=${1%%@*}
    __check_name "${_name}"

    _snapshot=${1#${_name}}
    _snapshot=${_snapshot#@} # Remove leading @ (separate step in case no @)
    __require_single_word "${_snapshot}" "Invalid snapshot name: ${_snapshot}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __snapshot ${_dataset} ${_snapshot}
}

__cmd_start () {
    local _name _dataset

    for _name in "${@}" ; do
        __check_name "${_name}"

        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}

        __start_jail ${_dataset}
    done
}

__cmd_status () {
    local _noheader OPTIND _opt _name _dataset

    _noheader=0

    OPTIND=1
    while getopts ":H" _opt ; do
        case ${_opt} in
            "H") _noheader=1 ;;
            "?") __fatal_error "Invalid status option: -${OPTARG}" ;;
        esac
    done
    shift $((OPTIND - 1))

    _name=${1:-"ALL"}
    __check_name_all "${_name}"

    if [ ${_name} = "ALL" ] ; then
        __status_all ${_noheader}
    else
        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}

        __status ${_dataset}
    fi
}

__cmd_stop () {
    local _name _dataset

    for _name in "${@}" ; do
        __check_name "${_name}"

        _dataset=$(__find_jail ${_name})
        __check_dataset "${_dataset}" ${_name}

        __stop_jail ${_dataset}
    done
}

__cmd_uncap () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __rctl_uncap ${_dataset}
}

__cmd_update () {
    local _name _dataset

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    __update ${_dataset}
}

__cmd_upgrade () {
    local _name _dataset _release

    _name=${1}
    __check_name "${_name}"

    _dataset=$(__find_jail ${_name})
    __check_dataset "${_dataset}" ${_name}

    if [ "${2%%=*}" == "release" ] ; then
        _release=${2#*=}
        __require_not_empty "${_release}" "Missing release!"
        __require_single_word "${_release}" "Invalid release: ${_release}"
        export release=${_release}
    fi

    __upgrade ${_dataset}
}
